{"version":3,"sources":["pages/Kamera/Kamera.js","App.js","serviceWorker.js","index.js","pages/Kamera/Kamera.module.scss","pages/Kamera/default.jpg"],"names":["Kamera","_useState","useState","undefined","_useState2","Object","slicedToArray","source","setSource","_useState3","_useState4","loading","setLoading","react_default","a","createElement","className","styles","container","button","type","accept","onChange","e","formData","FormData","fileField","document","querySelector","append","files","fetch","method","mode","body","then","response","json","url","catch","error","setTimeout","fallbackImage","waiting","react_spinners","color","src","alt","image","App","BrowserRouter","react","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","hide","__webpack_require__","p"],"mappings":"kNAOeA,EAAA,WAAW,IAAAC,EACIC,wBAASC,GADbC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACjBM,EADiBH,EAAA,GACTI,EADSJ,EAAA,GAAAK,EAEMP,oBAAS,GAFfQ,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEjBE,EAFiBD,EAAA,GAERE,EAFQF,EAAA,GA6BxB,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOC,WACrBL,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOE,QAAvB,UAEEN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,OAAO,UAAUC,SA7BrB,SAAAC,GACnBX,GAAW,GACX,IAAMY,EAAW,IAAIC,SACfC,EAAYC,SAASC,cAAc,sBACzCJ,EAASK,OAAO,OAAQH,EAAUI,MAAM,IAExCC,MAAM,SAAU,CACdC,OAAQ,OACRC,KAAM,UACNC,KAAMV,IAELW,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACJxB,GAAW,GACXJ,EAAU4B,EAASE,OAEpBC,MAAM,SAAAC,GAELC,WAAW,WACT7B,GAAW,GACXJ,EAAUkC,KACVX,MAAM,gBAAgBI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC/C,YASH1B,IAAYJ,GACZM,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAO0B,SAAvB,wBAEDhC,GACCE,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAON,SACrBE,EAAAC,EAAAC,cAAC6B,EAAA,WAAD,CAAYC,MAAO,UAGtBtC,GAAUM,EAAAC,EAAAC,cAAA,OAAK+B,IAAKvC,EAAQwC,IAAI,SAAS/B,UAAWC,IAAO+B,UClCnDC,EARH,kBACVpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACErC,EAAAC,EAAAC,cAACoC,EAAA,SAAD,KACEtC,EAAAC,EAAAC,cAACqC,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWvD,OCCnBwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASpC,SAASqC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC,mCElInBC,EAAAC,QAAA,CAAkBrD,UAAA,0BAAAC,OAAA,uBAAA6B,MAAA,sBAAArC,QAAA,wBAAAgC,QAAA,wBAAA6B,KAAA,0CCDlBF,EAAAC,QAAiBE,EAAAC,EAAuB","file":"static/js/main.63d23d61.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styles from \"./Kamera.module.scss\";\n\nimport { GridLoader } from \"react-spinners\";\n\nimport fallbackImage from \"./default.jpg\";\n\nexport default function() {\n  const [source, setSource] = useState(undefined);\n  const [loading, setLoading] = useState(false);\n\n  const sendToServer = e => {\n    setLoading(true);\n    const formData = new FormData();\n    const fileField = document.querySelector(\"input[type='file']\");\n    formData.append(\"foto\", fileField.files[0]);\n\n    fetch(\"/image\", {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"no-cors\",\n      body: formData\n    }) // body data type must match \"Content-Type\" header)\n      .then(response => response.json())\n      .then(response => {\n        setLoading(false);\n        setSource(response.url);\n      })\n      .catch(error => {\n        // fallback solution for connectivity issues during presentation\n        setTimeout(() => {\n          setLoading(false);\n          setSource(fallbackImage);\n          fetch(\"/setfallback\").then(response => response.json());\n        }, 2000);\n      });\n  };\n  return (\n    <div className={styles.container}>\n      <div className={styles.button}>\n        Capture\n        <input type=\"file\" accept=\"image/*\" onChange={sendToServer} />\n      </div>\n      {!loading && !source && (\n        <div className={styles.waiting}>Waiting for an Image</div>\n      )}\n      {loading && (\n        <div className={styles.loading}>\n          <GridLoader color={\"#fff\"} />\n        </div>\n      )}\n      {source && <img src={source} alt=\"result\" className={styles.image} />}\n    </div>\n  );\n}\n","import React, { Fragment } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n// pages\nimport Kamera from \"./pages/Kamera/Kamera\";\n\n// components\n\nconst App = () => (\n  <Router>\n    <Fragment>\n      <Route path=\"/\" exact component={Kamera} />\n    </Fragment>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Kamera_container__1Ya2J\",\"button\":\"Kamera_button__3d8uN\",\"image\":\"Kamera_image__S1Mjm\",\"loading\":\"Kamera_loading__2ZRTj\",\"waiting\":\"Kamera_waiting__2HSIQ\",\"hide\":\"Kamera_hide__Ifenm\"};","module.exports = __webpack_public_path__ + \"static/media/default.49af64e5.jpg\";"],"sourceRoot":""}