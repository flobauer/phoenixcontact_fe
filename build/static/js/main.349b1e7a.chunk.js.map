{"version":3,"sources":["pages/Kamera/Kamera.module.scss","pages/Kamera/Kamera.js","pages/Presentation/Presentation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","container","button","image","Kamera","_useState","useState","undefined","_useState2","Object","slicedToArray","source","setSource","react_default","a","createElement","className","styles","type","accept","onChange","e","formData","FormData","fileField","document","querySelector","append","files","fetch","method","mode","body","then","response","json","catch","error","console","url","capture","src","alt","Presentation","message","setMessage","useEffect","ws","WebSocket","onopen","send","onclose","evt","onmessage","data","theme","createTheme","primary","secondary","tertiary","quaternary","deck","transition","transitionDuration","slide","bgColor","heading","size","fit","caps","lineHeight","textColor","Link","to","App","BrowserRouter","react","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,UAAA,0BAAAC,OAAA,uBAAAC,MAAA,4OCGHC,EAAA,WAAW,IAAAC,EACIC,wBAASC,GADbC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACjBM,EADiBH,EAAA,GACTI,EADSJ,EAAA,GAmBxB,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOhB,WACrBY,EAAAC,EAAAC,cAAA,SACEG,KAAK,OACLC,OAAO,UACPC,SArBe,SAAAC,GACnB,IAAIC,EAAW,IAAIC,SACfC,EAAYC,SAASC,cAAc,sBACvCJ,EAASK,OAAO,OAAQH,EAAUI,MAAM,IAExCC,MAAM,oCAAqC,CACzCC,OAAQ,OACRC,KAAM,UACNC,KAAMV,IAELW,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BC,MAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAM,SAAUA,KACvCJ,KAAK,SAAAC,GACJtB,EAAUsB,EAASK,QASnBC,QAAQ,cACRxB,UAAWC,IAAOf,SAEnBS,GAAUE,EAAAC,EAAAC,cAAA,OAAK0B,IAAK9B,EAAQ+B,IAAI,4ECdxBC,EAAA,WAAW,IAAAtC,EACMC,mBAAS,WADfE,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACjBuC,EADiBpC,EAAA,GACRqC,EADQrC,EAAA,GAExBsC,oBAAU,WACR,IAAMC,EAAK,IAAIC,UAAU,4BACzBD,EAAGE,OAAS,WACVF,EAAGG,KAAK,gBAEVH,EAAGI,QAAU,SAAAC,GACXP,EAAW,kBAEbE,EAAGM,UAAY,SAAAD,GACbP,EAAWO,EAAIE,QAEhB,IAEH,IAAMC,EAAQC,IACZ,CACEC,QAAS,QACTC,UAAW,UACXC,SAAU,UACVC,WAAY,WAEd,CACEH,QAAS,aACTC,UAAW,cAIf,OACE7C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAMC,WAAY,CAAC,OAAQ,SAAUC,mBAAoB,IAAKR,MAAOA,GACnE1C,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAOF,WAAY,CAAC,QAASG,QAAQ,WACnCpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAASC,KAAM,EAAGC,KAAG,EAACC,MAAI,EAACC,WAAY,EAAGC,UAAU,aAApD,oCAIF1D,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAOF,WAAY,CAAC,QAASG,QAAQ,WACnCpD,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAMC,GAAG,KAAT,cAAyB7B,MCpClB8B,EATH,kBACV7D,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,KACE9D,EAAAC,EAAAC,cAAC6D,EAAA,SAAD,KACE/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW5E,IACjCS,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAOC,KAAK,gBAAgBE,UAAWrC,OCDzBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1E,EAAAC,EAAAC,cAACyE,EAAD,MAAS/D,SAASgE,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,KAAK,SAAA4D,GACjCA,EAAaC","file":"static/js/main.349b1e7a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Kamera_container__1Ya2J\",\"button\":\"Kamera_button__3d8uN\",\"image\":\"Kamera_image__S1Mjm\"};","import React, { useState } from \"react\";\nimport styles from \"./Kamera.module.scss\";\nimport { Link } from \"react-router-dom\";\n\nexport default function() {\n  const [source, setSource] = useState(undefined);\n\n  const sendToServer = e => {\n    var formData = new FormData();\n    var fileField = document.querySelector(\"input[type='file']\");\n    formData.append(\"foto\", fileField.files[0]);\n\n    fetch(\"http://automation.hack:5000/image\", {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      mode: \"no-cors\",\n      body: formData\n    }) // body data type must match \"Content-Type\" header)\n      .then(response => response.json())\n      .catch(error => console.error(\"Error:\", error))\n      .then(response => {\n        setSource(response.url);\n      });\n  };\n  return (\n    <div className={styles.container}>\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={sendToServer}\n        capture=\"environment\"\n        className={styles.button}\n      />\n      {source && <img src={source} alt=\"result\" />}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport styles from \"./Presentation.module.scss\";\nimport { Link } from \"react-router-dom\";\n\n// Import Spectacle Core tags\nimport {\n  BlockQuote,\n  Cite,\n  Deck,\n  Heading,\n  ListItem,\n  List,\n  Quote,\n  Slide,\n  Text\n} from \"spectacle\";\nimport createTheme from \"spectacle/lib/themes/default\";\n\nexport default function() {\n  const [message, setMessage] = useState(\"waiting\");\n  useEffect(() => {\n    const ws = new WebSocket(\"ws://localhost:5000/echo\");\n    ws.onopen = () => {\n      ws.send(\"socket open\");\n    };\n    ws.onclose = evt => {\n      setMessage(\"socket closed\");\n    };\n    ws.onmessage = evt => {\n      setMessage(evt.data);\n    };\n  }, []);\n\n  const theme = createTheme(\n    {\n      primary: \"white\",\n      secondary: \"#1F2022\",\n      tertiary: \"#03A9FC\",\n      quaternary: \"#CECECE\"\n    },\n    {\n      primary: \"Montserrat\",\n      secondary: \"Helvetica\"\n    }\n  );\n\n  return (\n    <Deck transition={[\"zoom\", \"slide\"]} transitionDuration={500} theme={theme}>\n      <Slide transition={[\"zoom\"]} bgColor=\"primary\">\n        <Heading size={1} fit caps lineHeight={1} textColor=\"secondary\">\n          AI on Automation Infrastructure\n        </Heading>\n      </Slide>\n      <Slide transition={[\"zoom\"]} bgColor=\"primary\">\n        <Link to=\"/\">zur Kamera {message}</Link>\n      </Slide>\n    </Deck>\n  );\n}\n","import React, { Fragment } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n// pages\nimport Kamera from \"./pages/Kamera/Kamera\";\nimport Presentation from \"./pages/Presentation/Presentation\";\n\n// components\n\nconst App = () => (\n  <Router>\n    <Fragment>\n      <Route path=\"/\" exact component={Kamera} />\n      <Route path=\"/presentation\" component={Presentation} />\n    </Fragment>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}